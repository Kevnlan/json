import 'dart:convert';

/*
import 'package:coronavirus/models/ListCountries.dart';
*/
import 'package:coronavirus/models/casessmodel.dart';
import 'package:coronavirus/models/countrymodels.dart';
import 'package:coronavirus/screen/thecases.dart';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;

import '../size_config.dart';

class List_sammry extends StatefulWidget {
  @override
  _List_sammryState createState() => _List_sammryState();
}

class _List_sammryState extends State<List_sammry> {
  Future<List<ListCountries>> _myString;
  List<ListCountries> countries = [];
  bool isempty;

  void initState() {
    // TODO: implement initState
    super.initState();
    initial();
  }

  void initial() async {
    _myString = _getUsers();
  }

  List<casessmodel> location = [];

  @override
  Widget build(BuildContext context) {
    return
      Scaffold(
        body: FutureBuilder(
            future: _myString,
            builder: (BuildContext context, AsyncSnapshot asyncSnapshot) {
              if (asyncSnapshot.data == null) {
                return Center(child: CircularProgressIndicator());
              } else {
                return isempty
                    ? Center(
                    child: Container(
                        color: Colors.white30,
                        child: Text(
                          "Table is empty .. ",
                          style: TextStyle(
                              fontSize: SizeConfig.heightMultiplier * 4.39),
                        )))
                    : ListView.builder(
                    itemCount: asyncSnapshot.data.length,
                    itemBuilder: (BuildContext context, int index) {
                      return Card(
                        color: Colors.white70,
                        child: ListTile(
                          title: Text("${asyncSnapshot.data[index].country} ",
                              style: TextStyle(
                                  fontSize: SizeConfig.heightMultiplier * 3)),
                          /*                      leading: Image.network(
                              "https://www.countryflags.io/${asyncSnapshot.data[index].country}/shiny/64.png",
                            ),*/
                          subtitle: Text(
                              "he is with driver ${asyncSnapshot.data[index]
                                  .todayDeaths}",
                              style: TextStyle(
                                  fontSize: SizeConfig.textMultiplier * 2.0)),
                          onTap: () {
                            Navigator.pushReplacement(
                                context,
                                MaterialPageRoute(
                                    builder: (context) =>
                                        TheCasess(
                                            asyncSnapshot.data[index].iSO2)));
                            print("ok");
                          },
                        ),
                      );
                    });
              }
            }),
      );
  }

  Future<List<ListCountries>> _getUsers() async {
    var data = await http.get("https://api.covid19api.com/summary");
    var jsonData = json.decode(data.body);
    if (data.statusCode == 200) {
      jsonData.forEach((element) {
        countries.add(ListCountries.fromJson(element));
      });

      return countries;
    }
  }
}
class ListCountries {
  Global global;
  List<Countries> countries;
  String date;

  ListCountries({this.global, this.countries, this.date});

  ListCountries.fromJson(Map<String, dynamic> json) {
    global =
    json['Global'] != null ? new Global.fromJson(json['Global']) : null;
    if (json['Countries'] != null) {
      countries = new List<Countries>();
      json['Countries'].forEach((v) {
        countries.add(new Countries.fromJson(v));
      });
    }
    date = json['Date'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    if (this.global != null) {
      data['Global'] = this.global.toJson();
    }
    if (this.countries != null) {
      data['Countries'] = this.countries.map((v) => v.toJson()).toList();
    }
    data['Date'] = this.date;
    return data;
  }
}

class Global {
  int newConfirmed;
  int totalConfirmed;
  int newDeaths;
  int totalDeaths;
  int newRecovered;
  int totalRecovered;

  Global(
      {this.newConfirmed,
        this.totalConfirmed,
        this.newDeaths,
        this.totalDeaths,
        this.newRecovered,
        this.totalRecovered});

  Global.fromJson(Map<String, dynamic> json) {
    newConfirmed = json['NewConfirmed'];
    totalConfirmed = json['TotalConfirmed'];
    newDeaths = json['NewDeaths'];
    totalDeaths = json['TotalDeaths'];
    newRecovered = json['NewRecovered'];
    totalRecovered = json['TotalRecovered'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['NewConfirmed'] = this.newConfirmed;
    data['TotalConfirmed'] = this.totalConfirmed;
    data['NewDeaths'] = this.newDeaths;
    data['TotalDeaths'] = this.totalDeaths;
    data['NewRecovered'] = this.newRecovered;
    data['TotalRecovered'] = this.totalRecovered;
    return data;
  }
}

class Countries {
  String country;
  String countryCode;
  String slug;
  int newConfirmed;
  int totalConfirmed;
  int newDeaths;
  int totalDeaths;
  int newRecovered;
  int totalRecovered;
  String date;

  Countries(
      {this.country,
        this.countryCode,
        this.slug,
        this.newConfirmed,
        this.totalConfirmed,
        this.newDeaths,
        this.totalDeaths,
        this.newRecovered,
        this.totalRecovered,
        this.date});

  Countries.fromJson(Map<String, dynamic> json) {
    country = json['Country'];
    countryCode = json['CountryCode'];
    slug = json['Slug'];
    newConfirmed = json['NewConfirmed'];
    totalConfirmed = json['TotalConfirmed'];
    newDeaths = json['NewDeaths'];
    totalDeaths = json['TotalDeaths'];
    newRecovered = json['NewRecovered'];
    totalRecovered = json['TotalRecovered'];
    date = json['Date'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['Country'] = this.country;
    data['CountryCode'] = this.countryCode;
    data['Slug'] = this.slug;
    data['NewConfirmed'] = this.newConfirmed;
    data['TotalConfirmed'] = this.totalConfirmed;
    data['NewDeaths'] = this.newDeaths;
    data['TotalDeaths'] = this.totalDeaths;
    data['NewRecovered'] = this.newRecovered;
    data['TotalRecovered'] = this.totalRecovered;
    data['Date'] = this.date;
    return data;
  }
}
